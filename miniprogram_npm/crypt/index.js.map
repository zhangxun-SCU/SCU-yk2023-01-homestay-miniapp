{"version":3,"sources":["crypt.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["(function() {\r\n  var base64map\r\n      = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\r\n\r\n  crypt = {\r\n    // Bit-wise rotation left\r\n    rotl: function(n, b) {\r\n      return (n << b) | (n >>> (32 - b));\r\n    },\r\n\r\n    // Bit-wise rotation right\r\n    rotr: function(n, b) {\r\n      return (n << (32 - b)) | (n >>> b);\r\n    },\r\n\r\n    // Swap big-endian to little-endian and vice versa\r\n    endian: function(n) {\r\n      // If number given, swap endian\r\n      if (n.constructor == Number) {\r\n        return crypt.rotl(n, 8) & 0x00FF00FF | crypt.rotl(n, 24) & 0xFF00FF00;\r\n      }\r\n\r\n      // Else, assume array and swap all items\r\n      for (var i = 0; i < n.length; i++)\r\n        n[i] = crypt.endian(n[i]);\r\n      return n;\r\n    },\r\n\r\n    // Generate an array of any length of random bytes\r\n    randomBytes: function(n) {\r\n      for (var bytes = []; n > 0; n--)\r\n        bytes.push(Math.floor(Math.random() * 256));\r\n      return bytes;\r\n    },\r\n\r\n    // Convert a byte array to big-endian 32-bit words\r\n    bytesToWords: function(bytes) {\r\n      for (var words = [], i = 0, b = 0; i < bytes.length; i++, b += 8)\r\n        words[b >>> 5] |= bytes[i] << (24 - b % 32);\r\n      return words;\r\n    },\r\n\r\n    // Convert big-endian 32-bit words to a byte array\r\n    wordsToBytes: function(words) {\r\n      for (var bytes = [], b = 0; b < words.length * 32; b += 8)\r\n        bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF);\r\n      return bytes;\r\n    },\r\n\r\n    // Convert a byte array to a hex string\r\n    bytesToHex: function(bytes) {\r\n      for (var hex = [], i = 0; i < bytes.length; i++) {\r\n        hex.push((bytes[i] >>> 4).toString(16));\r\n        hex.push((bytes[i] & 0xF).toString(16));\r\n      }\r\n      return hex.join('');\r\n    },\r\n\r\n    // Convert a hex string to a byte array\r\n    hexToBytes: function(hex) {\r\n      for (var bytes = [], c = 0; c < hex.length; c += 2)\r\n        bytes.push(parseInt(hex.substr(c, 2), 16));\r\n      return bytes;\r\n    },\r\n\r\n    // Convert a byte array to a base-64 string\r\n    bytesToBase64: function(bytes) {\r\n      for (var base64 = [], i = 0; i < bytes.length; i += 3) {\r\n        var triplet = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];\r\n        for (var j = 0; j < 4; j++)\r\n          if (i * 8 + j * 6 <= bytes.length * 8)\r\n            base64.push(base64map.charAt((triplet >>> 6 * (3 - j)) & 0x3F));\r\n          else\r\n            base64.push('=');\r\n      }\r\n      return base64.join('');\r\n    },\r\n\r\n    // Convert a base-64 string to a byte array\r\n    base64ToBytes: function(base64) {\r\n      // Remove non-base-64 characters\r\n      base64 = base64.replace(/[^A-Z0-9+\\/]/ig, '');\r\n\r\n      for (var bytes = [], i = 0, imod4 = 0; i < base64.length;\r\n          imod4 = ++i % 4) {\r\n        if (imod4 == 0) continue;\r\n        bytes.push(((base64map.indexOf(base64.charAt(i - 1))\r\n            & (Math.pow(2, -2 * imod4 + 8) - 1)) << (imod4 * 2))\r\n            | (base64map.indexOf(base64.charAt(i)) >>> (6 - imod4 * 2)));\r\n      }\r\n      return bytes;\r\n    }\r\n  };\r\n\r\n  module.exports = crypt;\r\n})();\r\n"]}